<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_data_broker_transform">
    <sys_ux_data_broker_transform action="INSERT_OR_UPDATE">
        <acl_failure_result/>
        <api_name>x_snc_emergency_al.Self report Summary</api_name>
        <description/>
        <mutates_server_data>false</mutates_server_data>
        <name>Self report Summary</name>
        <output_schema/>
        <private>false</private>
        <props>[&#13;
  {&#13;
  "name": "table",&#13;
  "label": "Table",&#13;
  "description": "Table to look up",&#13;
  "readOnly": false,&#13;
  "fieldType": "table_name",&#13;
  "mandatory": true&#13;
},&#13;
{&#13;
  "name": "recordId",&#13;
  "label": "Record",&#13;
  "description": "Record to look up (sys_id or display value)",&#13;
  "readOnly": false,&#13;
  "fieldType": "string",&#13;
  "mandatory": true,&#13;
  "defaultValue": ""&#13;
}&#13;
]</props>
        <required_translations>[{"message":"Table","comment":""},{"message":"Table to look up","comment":""},{"message":"Record","comment":""},{"message":"Record to look up (sys_id or display value)","comment":""}]</required_translations>
        <schema_version>1.0.0</schema_version>
        <script><![CDATA[function transform(input) {
	var status = '';
	var workStatus = new GlideRecord('x_snc_emergency_al_work_status_request_task');
	workStatus.addQuery('self_report',input["recordId"]);
	workStatus.query();
	if(workStatus.next()){
		status = workStatus.getDisplayValue('state');
	}
	
    var selfReport = new GlideRecord(input["table"]);
    if (!selfReport.get(input["recordId"]))
        return {};
    var displayBlock = [{
            "label": gs.getMessage("Manager"),
            "value": {
                "type": "string",
                "value": selfReport.name.manager.getDisplayValue()
            }
        }, {
            "label": gs.getMessage("Location"),
            "value": {
                "type": "string",
                "value": selfReport.name.location.getDisplayValue()
            }
        }, {
            "label": gs.getMessage("Updated"),
            "value": {
                "type": "string",
                "value": selfReport.getValue("sys_updated_on")
            }
        },
        {
            "label": gs.getMessage("Type of emergency"),
            "value": {
                "type": "string",
                "value": selfReport.getDisplayValue("type_of_emergency")
            }
        },
        {
            "label": gs.getMessage("Start date"),
            "value": {
                "type": "string",
                "value": selfReport.getValue("start_date")
            }
        },
        {
            "label": gs.getMessage("Your health status"),
            "value": {
                "type": "string",
                "value": selfReport.getDisplayValue("your_health_status")
            }
        },
        {
            "label": gs.getMessage("Your work status"),
            "value": {
                "type": "string",
                "value": selfReport.getDisplayValue("your_work_status")
            }
        },
        {
            "label": gs.getMessage("Work status request"),
            "value": {
                "type": "string",
               // "value": selfReport.getDisplayValue("status")
                "value": status
            }
        }
    ];
    if (selfReport.getValue("were_other_employees_affected_by_this_emergency") == "1") {
        displayBlock.push({
            "label": gs.getMessage("Were others affected?"),
            "value": {
                "type": "string",
                "value": gs.getMessage("Yes")
            }
        });

        displayBlock.push({
            "label": gs.getMessage("Affected"),
            "value": {
                "type": "string",
                "value": selfReport.getValue("who_else_was_affected").split(",").length + gs.getMessage(" coworkers")
            }
        });
    } else {
        displayBlock.push({
            "label": gs.getMessage("Were others affected"),
            "value": {
                "type": "string",
                "value": gs.getMessage("No")
            }
        });
    }
    var statesColors = {
        "Submitted": "positive",
        "Status requested": "high",
        "At risk": "critical",
        "Closed": "low"
    };
    var selfReoprtObject = {

        "breadcrumb": [{
            "label": gs.getMessage("Home"),
            "href": "now/emergency/home"
        }, {
            "label": selfReport.number + " " + gs.getMessage(selfReport.getDisplayValue("type_of_emergency")),
            "href": "#"
        }],
        "statusWithNumber": [{
            "label": gs.getMessage("Highlighted value"),
            "value": {
                "type": "highlighted-value",
                "label": gs.getMessage("{0}", selfReport.getDisplayValue("status")),
                "status": statesColors[selfReport.getDisplayValue("status")],
                "showIcon": selfReport.getDisplayValue("status") == "Submitted" || selfReport.getDisplayValue("status") == "At risk" ? false : true
            }
        }, {
            "label": gs.getMessage("Number"),
            "value": {
                "type": "string",
                "value": selfReport.getValue('number')
            }
        }],
        "status": selfReport.status.getDisplayValue(),
        "dontShowSubmitIcon": selfReport.getDisplayValue("status") == "Submitted" ? false : true,
        "dontShowRiskIcon": selfReport.getDisplayValue("status") == "At risk" ? false : true,
        "dontShowClosedIcon": selfReport.getDisplayValue("status") == "Closed" ? false : true,
        "dontShowStatusRequestedIcon": selfReport.getDisplayValue("status") == "Status requested" ? false : true,
        "emergencyType": selfReport.type_of_emergency.getDisplayValue(),
        "emergencyDetails": selfReport.getValue('emergency_details'),
        "emergencyUpdate": [{
            "label": gs.getMessage("Emergency Update"),
            "value": {
                "type": "string",
                "value": selfReport.getValue("emergency_update")
            }
        }],
        "emergencyUpdateVisible": selfReport.getValue("emergency_update") ? false : true,
        "displayBlock": displayBlock
    };
    selfReoprtObject["hideClose"] = false;
    if (selfReport.status.getDisplayValue() == 'Closed')
        selfReoprtObject["hideClose"] = true;

    return selfReoprtObject;
}]]></script>
        <sys_class_name>sys_ux_data_broker_transform</sys_class_name>
        <sys_created_by>rakesh</sys_created_by>
        <sys_created_on>2020-11-20 07:49:46</sys_created_on>
        <sys_id>a640315adba82010a92f5a75dc961970</sys_id>
        <sys_mod_count>78</sys_mod_count>
        <sys_name>Self report Summary</sys_name>
        <sys_package display_value="Emergency Alert" source="x_snc_emergency_al">2962137651c42010f8776b3ef04affc3</sys_package>
        <sys_policy/>
        <sys_scope display_value="Emergency Alert">2962137651c42010f8776b3ef04affc3</sys_scope>
        <sys_update_name>sys_ux_data_broker_transform_a640315adba82010a92f5a75dc961970</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-02-01 13:16:00</sys_updated_on>
    </sys_ux_data_broker_transform>
    <sys_translated_text action="delete_multiple" query="documentkey=a640315adba82010a92f5a75dc961970"/>
</record_update>
